const db = require('../db/db');

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É –∫—ñ–º–Ω–∞—Ç–∏
function generateRoomCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 6; i++) {
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
}


async function getRoomByCode(room_code) {
    try {
        const pool = db();
        const [rows] = await pool.execute('SELECT * FROM room WHERE room_code = ?', [room_code]);
        return rows.length > 0 ? rows[0] : null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–º–Ω–∞—Ç—É –∞–±–æ null
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏:', error);
        throw error;
    }
}

exports.createRoom = async (req, res) => {
    console.log('üëâ /create-room –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ');
    console.log('üßæ –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:', req.body);
    const { player_number, room_code, player_id } = req.body;

    if (!player_number) {
        return res.status(400).json({ error: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º!' });
    }

    try {
        const pool = db();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫—ñ–º–Ω–∞—Ç–∞ –∑–∞ room_code
        let existingRoom = null;
        if (room_code) {
            existingRoom = await getRoomByCode(room_code);
        }

        if (existingRoom) {
            // –Ø–∫—â–æ –∫—ñ–º–Ω–∞—Ç–∞ —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ —ó—ó
            await pool.execute(
                'UPDATE room SET player_number = ? WHERE room_code = ?',
                [player_number, room_code]
            );

            return res.status(200).json({
                message: '–ö—ñ–º–Ω–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!',
                room_code,
                room_id: existingRoom.id
            });
        } else {
            // –Ø–∫—â–æ –∫—ñ–º–Ω–∞—Ç–∏ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
            const newRoomCode = generateRoomCode();
            const [result] = await pool.execute(
                'INSERT INTO room (room_code, player_number) VALUES (?, ?)',
                [newRoomCode, player_number]
            );
            
            if (result.insertId) {
                await pool.execute(
                    'UPDATE player SET room_id = ? WHERE player_id = ?',
                    [result.insertId, player_id]
                );
                return res.status(200).json({
                    message: '–ö—ñ–º–Ω–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!',
                    room_code: newRoomCode,
                    room_id: result.insertId
                });
            } else {
                return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É.' });
            }
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏:', error);
        return res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
};
exports.updateRoom = async (req, res) => {
    try {
        const { player_number, room_code, player_id } = req.body;
        
        if (!room_code) {
            return res.status(400).json({ error: '–ö–æ–¥ –∫—ñ–º–Ω–∞—Ç–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
        }
        
        const existingRoom = await db.getRoom(room_code);
        if (!existingRoom) {
            return res.status(404).json({ error: '–ö—ñ–º–Ω–∞—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        await db.updateRoom(room_code, player_number);
        
        res.json({ 
            success: true, 
            message: '–ö—ñ–º–Ω–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ', 
            room_code 
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–º–Ω–∞—Ç–∏:', error);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};
exports.findRoom = async (req, res) => {
    const { room_code, player_id } = req.body;

    try {
        const pool = db();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫—ñ–º–Ω–∞—Ç–∞ –∑–∞ room_code
        let existingRoom = null;
        if (room_code) {
            existingRoom = await getRoomByCode(room_code);
        }

        if (existingRoom) {
            await pool.execute(
                'UPDATE player SET room_id = ? WHERE player_id = ?',
                [existingRoom.room_id, player_id]
            );
            return res.status(200).json({
                room_id: existingRoom.id,
                valid: true
            });
        } else {
                return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É.' , valid: false});
            
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫—ñ–º–Ω–∞—Ç–∏:', error);
        return res.status(500).json({ error: error , valid: false});
    }
};