// Socket.IO –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const socket = io('http://localhost:3000');

const room_code = sessionStorage.getItem('room_code');
const player_id = sessionStorage.getItem('player_id');
const isHost = sessionStorage.getItem('is_host') === 'true';
console.log(sessionStorage.getItem('room_code'));
console.log(sessionStorage.getItem('player_id'));
socket.on('connect', () => {
    console.log('üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞. Socket ID:', socket.id);

    // –í—Ö—ñ–¥ —É –∫—ñ–º–Ω–∞—Ç—É
    console.log( sessionStorage.getItem('room_code'), player_id);
    socket.emit('joinRoom', { room_code, player_id });
});

let playerPosition = null;

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
socket.on('roomJoined', ({ position, playersInRoom }) => {
    console.log(`üì¶ –í–∏ ‚Äî –ì—Ä–∞–≤–µ—Ü—å ${position}`);
    playerPosition = position;

    if (playerPosition !== 1) {
        document.querySelector('.number-of-players').disabled = true;
        const startButton = document.querySelectorAll('.all-button button')[1];
        if (startButton) startButton.disabled = true;
    }
    console.log('–ì—Ä–∞–≤—Ü—ñ –≤ –∫—ñ–º–Ω–∞—Ç—ñ: ' + playersInRoom)
});

// –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤ –∫—ñ–º–Ω–∞—Ç–∏
socket.on('roomUpdate', (players) => {
    // –û—á–∏—â—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤
    // const ids = players.map(player => player.player_id);
    // console.log('Players: ' + ids);
    playersList.innerHTML = "";
    console.log('smth' + players);
    // –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é (—ñ–Ω–¥–µ–∫—Å + 1)
    for(let i = 0; i < players.length; i++){
        const player_id = players[i].player_id;
        const nickname = players[i].nickname;
        //const pos = players[i].position;
        const name = (sessionStorage.getItem('player_id') === player_id) ? `–í–∏ (${nickname})` : nickname;
        const playerDiv = createPlayerElement(name, `player-${i+1}`);
        playersList.appendChild(playerDiv);
    }
    // players.forEach((player_id, nickname, pos) => {
    //      //const pos = idx + 1;
    //      // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äì –º–æ–∂–Ω–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –Ω—ñ–∫–Ω–µ–π–º–∏ —ñ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö, —Ç—É—Ç –ø–æ–∫–∏ —â–æ –±–∞–∑–æ–≤–æ:
    //      const name = (sessionStorage.getItem('player_id') === player_id) ? `–í–∏ (${nickname})` : nickname;
    //      const playerDiv = createPlayerElement(name, `player-${pos}`);
    //      playersList.appendChild(playerDiv);
    // });
});

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ DOM-–µ–ª–µ–º–µ–Ω—Ç–∏
const playerSelect = document.querySelector('.number-of-players');
const playersList = document.getElementById('players-list');
let selectedColors = [];
let players = [];

// –§—É–Ω–∫—Ü—ñ—è, —â–æ —Å—Ç–≤–æ—Ä—é—î –µ–ª–µ–º–µ–Ω—Ç –≥—Ä–∞–≤—Ü—è
function createPlayerElement(playerName, playerClass) {
    const playerDiv = document.createElement('div');
    playerDiv.classList.add('players', playerClass);
    const playerText = document.createElement('span');
    playerText.classList.add('players-text');
    playerText.textContent = playerName;
    const playerColorButton = document.createElement('button');
    playerColorButton.classList.add('players-color');
    playerColorButton.setAttribute('title', '');
    playerColorButton.textContent = '';
    playerColorButton.onclick = function () {
        openModal(playerColorButton);
    };
    playerDiv.appendChild(playerText);
    playerDiv.appendChild(playerColorButton);
    return playerDiv;
}

// –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–ª—å–æ—Ä—É
function openModal(playerElement) {
    // –¢–µ–ø–µ—Ä –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä –ª–∏—à–µ –¥–ª—è —Å–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ–±—Ç–æ –¥–ª—è –≥—Ä–∞–≤—Ü—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—Ç—Ä–∏–º–∞–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
    const playerClasses = playerElement.closest('.players').classList;
    // –ü—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ –≤–∏ ‚Äì –≥—Ä–∞–≤–µ—Ü—å 1, —Ç–æ–¥—ñ —Ç—ñ–ª—å–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫–ª–∞—Å–æ–º "player-1" –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä
    if (playerClasses.contains(`player-${playerPosition}`)) {
        window.selectedPlayerElement = playerElement;
        document.getElementById('colorModal').style.display = 'block';
    } else {
        alert('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–ª—ñ—Ä —ñ–Ω—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è!');
    }
}

function closeModal() {
    document.getElementById('colorModal').style.display = 'none';
}

function selectColor(color) {
    if (window.selectedPlayerElement && window.selectedPlayerElement.closest('.players').classList.contains(`player-${playerPosition}`)) {
        if (!selectedColors.includes(color)) {
            window.selectedPlayerElement.style.backgroundColor = color;
            selectedColors.push(color);
            updateColorButtons();
            const numPlayers = parseInt(playerSelect.value);
            sendPlayerData(window.selectedPlayerElement.closest('.players').querySelector('.players-text').textContent, color, numPlayers);
            closeModal();
        } else {
            alert('–¶–µ–π –∫–æ–ª—ñ—Ä –≤–∂–µ –≤–∏–±—Ä–∞–ª–∏!');
        }
    }
}

function updateColorButtons() {
    const colorButtons = document.querySelectorAll('.color-button');
    colorButtons.forEach(button => {
        const buttonColor = button.style.backgroundColor;
        if (selectedColors.includes(buttonColor)) {
            button.disabled = true;
            button.style.backgroundColor = '#D9D9D9';
            button.style.borderColor = '#B0B0B0';
            button.style.cursor = 'not-allowed';
        } else {
            button.disabled = false;
            button.style.backgroundColor = buttonColor;
            button.style.borderColor = buttonColor;
            button.style.cursor = 'pointer';
        }
    });
    const playerElements = document.querySelectorAll('.players-color');
    playerElements.forEach(playerElement => {
        const playerColor = playerElement.style.backgroundColor;
        if (selectedColors.includes(playerColor)) {
            playerElement.style.backgroundColor = '#D9D9D9';
        }
    });
}

function sendPlayerData(playerName, playerColor, numPlayers) {
    fetch('http://localhost:3000/api/save-player-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            player_id: sessionStorage.getItem('player_id'),
            color: playerColor,
            numPlayers: numPlayers,
        }),
    })
        .then(response => response.json())
        .then(data => {
            console.log('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', data);
        })
        .catch(error => {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–∞–Ω–∏—Ö:', error);
        });
}

// –Ø–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äî –ª–∏—à–µ —Ö–æ—Å—Ç –æ–Ω–æ–≤–ª—é—î –∫—ñ–º–Ω–∞—Ç—É
playerSelect.addEventListener('change', () => {
    const numPlayers = parseInt(playerSelect.value);
    if (isHost) {

            updateRoom(numPlayers, sessionStorage.getItem('room_code'));
          
          
    }
});

// –ü—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø–æ—á–∞—Ç–∫–æ–≤–µ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É (–¥–ª—è —Ö–æ—Å—Ç–∞)
document.addEventListener("DOMContentLoaded", function () {
    
    const room_code = sessionStorage.getItem('room_code');
    console.log(room_code);
    // if (isHost) {
    //     if (!room_code) {
           
    //       } else {
    //         updateRoom(defaultNumPlayers, room_code);
    //       }
          
    // }

    const player_id = sessionStorage.getItem('player_id');
    console.log(player_id);
    fetch(`http://localhost:3000/api/get-nickname/${player_id}`)
        .then(response => response.json())
        .then(data => {
            const savedNickname = data.nickname;
            // –¢—É—Ç —Ö–æ—Å—Ç —Ñ–æ—Ä–º—É—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç. –ü–æ–¥–∞–ª—å—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ —á–µ—Ä–µ–∑ roomUpdate
            const firstPlayer = playersList.querySelector('.players');
            if(firstPlayer){
                const firstPlayerText = firstPlayer.querySelector('.players-text');
                firstPlayerText.textContent = `${savedNickname || '–ì—Ä–∞–≤–µ—Ü—å'}`;
                const firstPlayerColor = firstPlayer.querySelector('.players-color').style.backgroundColor || '#FFFFFF';
                const numPlayers = parseInt(playerSelect.value);
                sendPlayerData(savedNickname, firstPlayerColor, numPlayers);
            }
        })
        .catch(error => {
            console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω—ñ–∫–Ω–µ–π–º—É:", error);
        });
});

// –õ–æ–≥—ñ–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è
document.querySelector('.button2').addEventListener('click', function () {
    const link = "https://example.com"; // –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const tempInput = document.createElement('input');
    document.body.appendChild(tempInput);
    tempInput.value = link;
    tempInput.select();
    document.execCommand('copy');
    document.body.removeChild(tempInput);

    const message = document.getElementById('copyMessage');
    message.style.display = 'block';
    setTimeout(function () {
        message.style.display = 'none';
    }, 2000);
});
document.querySelector('.button2').addEventListener('click', function() {
    const link = "https://example.com"; 
    const tempInput = document.createElement('input');
    document.body.appendChild(tempInput);
    tempInput.value = link;
    tempInput.select();
    document.execCommand('copy');
    document.body.removeChild(tempInput);

    const message = document.getElementById('copyMessage');
    message.style.display = 'block';

    setTimeout(function() {
        message.style.display = 'none';
    }, 2000);
});

// –§—É–Ω–∫—Ü—ñ—è createOrUpdateRoom –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ª–∏—à–µ –¥–ª—è —Ö–æ—Å—Ç–∞

  async function updateRoom(playerNumber, roomCode) {
    try {
      const response = await fetch('http://localhost:3000/api/update-room', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          player_number: playerNumber,
          room_code: roomCode
        }),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`HTTP error! Status: ${response.status} - ${errorData.error}`);
      }
  
      const data = await response.json();
      console.log('üîÑ –ö—ñ–º–Ω–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ:', data);
  
    //   if (data.room_code) {
    //     sessionStorage.setItem('room_code', data.room_code);
    //   }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:', error.message || error);
    }
  }
    

// –õ–æ–≥—ñ–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏
const openBtn = document.getElementById("openModal");
const closeBtn = document.getElementById("closeModal");
const modal = document.getElementById("modal");

openBtn.addEventListener("click", () => {
    modal.classList.add("open");
});

closeBtn.addEventListener("click", () => {
    modal.classList.remove("open");
});
